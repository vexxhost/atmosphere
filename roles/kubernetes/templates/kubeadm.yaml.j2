---
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
localAPIEndpoint:
  bindPort: 16443
nodeRegistration:
  kubeletExtraArgs:
    cgroups-per-qos: "false"
    enforce-node-allocatable: ""
    node-ip: "{{ ansible_default_ipv4.address }}"
    container-runtime: "remote"
    container-runtime-endpoint: "{{ kubernetes_cri_socket }}"
---
apiVersion: kubeadm.k8s.io/v1beta2
kind: JoinConfiguration
nodeRegistration:
  kubeletExtraArgs:
    cgroups-per-qos: "false"
    enforce-node-allocatable: ""
    node-ip: "{{ ansible_default_ipv4.address }}"
    container-runtime: "remote"
    container-runtime-endpoint: "{{ kubernetes_cri_socket }}"
{% if (_kubernetes_bootstrap_node is not defined) or (_kubernetes_bootstrap_node is defined and inventory_hostname != _kubernetes_bootstrap_node) %}
discovery:
  bootstrapToken:
    token: "{{ _kubeadm_token_create.stdout | trim }}"
    apiServerEndpoint: "{{ kubernetes_hostname }}:6443"
    caCertHashes: ["sha256:{{ _kubeadm_certificate_info.public_key_fingerprints.sha256 | replace(':', '') }}"]
{% if inventory_hostname in groups[kubernetes_control_plane_group] %}
controlPlane:
  localAPIEndpoint:
    bindPort: 16443
  certificateKey: {{ _kubeadm_init_upload_certs.stdout_lines[-1] | trim }}
{% endif %}
{% endif %}
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
controlPlaneEndpoint: "{{ kubernetes_hostname }}:6443"
{% if atmosphere_image_repository is defined %}
imageRepository: "{{ atmosphere_image_repository }}"
{% endif %}
apiServer:
  extraArgs:
    oidc-username-claim: email
{% if kubernetes_oidc_issuer_url is defined %}
    oidc-issuer-url: {{ kubernetes_oidc_issuer_url }}
    oidc-client-id: {{ kubernetes_oidc_client_id }}
{% endif %}
controllerManager:
  extraArgs:
    bind-address: "0.0.0.0"
scheduler:
  extraArgs:
    bind-address: "0.0.0.0"
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
---
apiVersion: kubeproxy.config.k8s.io/v1alpha1
kind: KubeProxyConfiguration
metricsBindAddress: 0.0.0.0
