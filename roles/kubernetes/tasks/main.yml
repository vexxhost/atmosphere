# Copyright (c) 2023 VEXXHOST, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# TODO(fitbeard): Move common system packages from all roles to dedicated role.
- name: Install additional packages
  ansible.builtin.package:
    name:
      - conntrack
      - socat

- name: Download cni plugins
  ansible.builtin.include_role:
    name: download_artifact
  vars:
    download_artifact_url: "{{ kubernetes_cni_download_url }}"
    download_artifact_dest: "{{ kubernetes_cni_download_dest }}"
    download_artifact_checksum: "sha256:{{ kubernetes_cni_archive_checksum }}"
    download_artifact_owner: root
    download_artifact_mode: "0755"

- name: Create folder for cni plugins
  ansible.builtin.file:
    path: /opt/cni/bin
    state: directory
    mode: "0755"
    owner: root
    recurse: true

- name: Unarchive cni plugins
  ansible.builtin.unarchive:
    src: "{{ kubernetes_cni_download_dest }}"
    dest: /opt/cni/bin
    mode: "0755"
    remote_src: true

- name: Download kubectl binary
  ansible.builtin.include_role:
    name: download_artifact
  vars:
    download_artifact_url: "{{ kubernetes_kubectl_download_url }}"
    download_artifact_dest: "{{ kubernetes_kubectl_download_dest }}"
    download_artifact_checksum: "sha256:{{ kubernetes_kubectl_binary_checksum }}"
    download_artifact_owner: root
    download_artifact_mode: "0755"

- name: Copy kubectl binary from download dir
  ansible.builtin.copy:
    src: "{{ kubernetes_kubectl_download_dest }}"
    dest: "{{ kubernetes_bin_dir }}/kubectl"
    mode: "0755"
    remote_src: true

- name: Download kubeadm binary
  ansible.builtin.include_role:
    name: download_artifact
  vars:
    download_artifact_url: "{{ kubernetes_kubeadm_download_url }}"
    download_artifact_dest: "{{ kubernetes_kubeadm_download_dest }}"
    download_artifact_checksum: "sha256:{{ kubernetes_kubeadm_binary_checksum }}"
    download_artifact_owner: root
    download_artifact_mode: "0755"

- name: Copy kubeadm binary from download dir
  ansible.builtin.copy:
    src: "{{ kubernetes_kubeadm_download_dest }}"
    dest: "{{ kubernetes_bin_dir }}/kubeadm"
    mode: "0755"
    remote_src: true

- name: Download kubelet binary
  ansible.builtin.include_role:
    name: download_artifact
  vars:
    download_artifact_url: "{{ kubernetes_kubelet_download_url }}"
    download_artifact_dest: "{{ kubernetes_kubelet_download_dest }}"
    download_artifact_checksum: "sha256:{{ kubernetes_kubelet_binary_checksum }}"
    download_artifact_owner: root
    download_artifact_mode: "0755"

- name: Copy kubelet binary from download dir
  ansible.builtin.copy:
    src: "{{ kubernetes_kubelet_download_dest }}"
    dest: "{{ kubernetes_bin_dir }}/kubelet"
    mode: "0755"
    remote_src: true
  notify: Restart kubelet

- name: Create folders for kubernetes configuration
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
    owner: root
  with_items:
    - /etc/systemd/system/kubelet.service.d
    - /etc/kubernetes
    - /etc/kubernetes/manifests
  notify:
    - Reload systemd
    - Restart kubelet

- name: Add kubeadm dropin for kubelet systemd service config
  ansible.builtin.copy:
    src: 10-kubeadm.conf
    dest: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    owner: root
    group: root
    mode: "0644"
  notify:
    - Reload systemd
    - Restart kubelet

- name: Add kubelet systemd service config
  ansible.builtin.copy:
    src: kubelet.service
    dest: /etc/systemd/system/kubelet.service
    owner: root
    group: root
    mode: "0644"
  notify:
    - Reload systemd
    - Restart kubelet

- name: Create crictl config
  ansible.builtin.template:
    src: crictl.yaml.j2
    dest: /etc/crictl.yaml
    owner: root
    mode: "0644"

- name: Enable kernel modules on-boot
  ansible.builtin.template:
    src: modules-load.conf.j2
    dest: /etc/modules-load.d/k8s.conf
    owner: root
    group: root
    mode: "0644"

- name: Enable kernel modules in runtime
  community.general.modprobe:
    name: "{{ item }}"
    state: present
  loop: "{{ kubernetes_kernel_modules }}"

- name: Configure sysctl values
  ansible.posix.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
  loop: "{{ kubernetes_sysctls }}"

- name: Disable swap on the host
  when: not kubernetes_allow_unsafe_swap | bool
  block:
    - name: Check swap status
      ansible.builtin.command: /sbin/swapon -s
      changed_when: false
      register: _swapon

    - name: Disable swap
      ansible.builtin.command: /sbin/swapoff -a
      changed_when: true
      ignore_errors: "{{ ansible_check_mode }}"
      when:
        - _swapon.stdout

    - name: Remove swapfile from /etc/fstab
      ansible.posix.mount:
        name: "{{ item }}"
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Create noswap systemd service config file
      ansible.builtin.copy:
        src: noswap.service
        dest: /etc/systemd/system/noswap.service
        owner: root
        group: root
        mode: "0644"
      notify: Enable noswap service

- name: Configure short hostname
  ansible.builtin.hostname:
    name: "{{ inventory_hostname_short }}"

- name: Ensure hostname inside hosts file
  ansible.builtin.lineinfile:
    path: /etc/hosts
    regexp: '^127\.0\.1\.1'
    line: 127.0.1.1 {{ inventory_hostname }} {{ inventory_hostname_short }}

- name: Force any restarts if necessary
  ansible.builtin.meta: flush_handlers

- name: Enable and start kubelet service
  ansible.builtin.service:
    name: kubelet
    enabled: true
    state: started

- name: Setup control plane
  when: inventory_hostname in groups[kubernetes_control_plane_group]
  ansible.builtin.include_tasks: control-plane.yml

- name: Setup nodes
  when: inventory_hostname not in groups[kubernetes_control_plane_group]
  ansible.builtin.include_tasks: nodes.yml

- name: Add labels to control plane nodes
  delegate_to: "{{ groups[kubernetes_control_plane_group][0] }}"
  kubernetes.core.k8s:
    state: patched
    kind: Node
    name: "{{ inventory_hostname_short }}"
    definition:
      metadata:
        labels: "{{ kubernetes_control_plane_labels }}"
  when:
    - inventory_hostname in groups['controllers']

- name: Add labels to compute nodes
  delegate_to: "{{ groups[kubernetes_control_plane_group][0] }}"
  kubernetes.core.k8s:
    state: patched
    kind: Node
    name: "{{ inventory_hostname_short }}"
    definition:
      metadata:
        labels: "{{ kubernetes_compute_node_labels }}"
  when:
    - inventory_hostname in groups['computes']
