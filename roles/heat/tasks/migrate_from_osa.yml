# Copyright (c) 2023 VEXXHOST, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Slurp the configuration file for the service
  run_once: true
  delegate_to: "{{ groups['heat_all'][0] }}"
  ansible.builtin.slurp:
    path: /etc/heat/heat.conf
  register: _heat_config_file

- name: Generate configuration using Atmosphere
  run_once: true
  changed_when: false
  kubernetes.core.helm_template:
    chart_ref: "{{ heat_helm_chart_ref }}"
    release_namespace: "{{ heat_helm_release_namespace }}"
    release_values: "{{ _heat_helm_values | combine(heat_helm_values, recursive=True) }}"
    show_only:
      - templates/configmap-etc.yaml
  register: _heat_helm_template

- name: Save fact with generated configurations
  run_once: true
  ansible.builtin.set_fact:
    _osa_nova_config: "{{ _heat_config_file['content'] | b64decode | vexxhost.atmosphere.from_ini }}"
    _atmosphere_nova_config: "{{ (_heat_helm_template.stdout | from_yaml).data['heat.conf'] | b64decode | vexxhost.atmosphere.from_ini }}"

- name: Print difference between Atmosphere and OpenStack Ansible
  run_once: true
  ansible.utils.fact_diff:
    before: "{{ _osa_nova_config }}"
    after: "{{ _atmosphere_nova_config }}"

- name: Pause to verify the configuration
  ansible.builtin.pause:

- name: Get the Kuberentes service for Percona XtraDB Cluster
  run_once: true
  kubernetes.core.k8s_info:
    kind: Service
    name: "{{ openstack_helm_endpoints.oslo_db.hosts.default }}"
    namespace: "{{ heat_helm_release_namespace }}"
  register: _pxc_service

- name: Fail if the databases already exist
  run_once: true
  check_mode: true
  delegate_to: "{{ groups['galera_all'][0] }}"
  community.mysql.mysql_db:
    login_host: "{{ _pxc_service.resources[0].spec.clusterIP }}"
    login_user: root
    login_password: "{{ openstack_helm_endpoints.oslo_db.auth.admin.password }}"
    name: "{{ item }}"
  register: _pxc_db_check
  failed_when: _pxc_db_check is not changed
  loop:
    - heat

- name: Shut off all the containers
  run_once: true
  delegate_to: "{{ hostvars[item]['physical_host'] }}"
  ansible.builtin.command: "lxc-stop -n {{ item }}"
  loop: "{{ groups[containers] }}"
  register: _lxc_stop
  failed_when: _lxc_stop.rc != 0 and 'is not running' not in _lxc_stop.stderr
  vars:
    containers: heat_all

- name: Wait for the containers to stop
  run_once: true
  delegate_to: "{{ hostvars[item]['physical_host'] }}"
  ansible.builtin.wait_for:
    path: "/var/lib/lxc/{{ item }}/state"
    state: absent
  loop: "{{ groups[containers] }}"
  vars:
    containers: heat_all

- name: Dump the database
  run_once: true
  delegate_to: "{{ groups['galera_all'][0] }}"
  community.mysql.mysql_db:
    state: dump
    name: "{{ item }}"
    dump_extra_args: --skip_add_locks
    skip_lock_tables: true
    target: "/root/{{ item }}-{{ ansible_date_time.epoch }}.sql"
  loop:
    - heat

- name: Restore the database
  run_once: true
  delegate_to: "{{ groups['galera_all'][0] }}"
  community.mysql.mysql_db:
    login_host: "{{ _pxc_service.resources[0].spec.clusterIP }}"
    login_user: root
    login_password: "{{ openstack_helm_endpoints.oslo_db.auth.admin.password }}"
    state: import
    name: "{{ item }}"
    target: "/root/{{ item }}-{{ ansible_date_time.epoch }}.sql"
  loop:
    - heat

- name: Run deployment flow
  ansible.builtin.import_tasks:
    file: main.yml

# TODO: fix haproxy configs for api and cfn
