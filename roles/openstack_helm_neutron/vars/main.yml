# Copyright (c) 2022 VEXXHOST, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

_openstack_helm_neutron_values:
  endpoints: "{{ openstack_helm_endpoints }}"
  images:
    pull_policy: Always
    tags:
      bootstrap: "{{ atmosphere_images['bootstrap'] | docker_image('ref') }}"
      db_drop: "{{ atmosphere_images['db_drop'] | docker_image('ref') }}"
      db_init: "{{ atmosphere_images['db_init'] | docker_image('ref') }}"
      dep_check: "{{ atmosphere_images['dep_check'] | docker_image('ref') }}"
      ks_endpoints: "{{ atmosphere_images['ks_endpoints'] | docker_image('ref') }}"
      ks_service: "{{ atmosphere_images['ks_service'] | docker_image('ref') }}"
      ks_user: "{{ atmosphere_images['ks_user'] | docker_image('ref') }}"
      neutron_bagpipe_bgp: "{{ atmosphere_images['neutron_bagpipe_bgp'] | docker_image('ref') }}"
      neutron_db_sync: "{{ atmosphere_images['neutron_db_sync'] | docker_image('ref') }}"
      neutron_dhcp: "{{ atmosphere_images['neutron_dhcp'] | docker_image('ref') }}"
      neutron_ironic_agent: "{{ atmosphere_images['neutron_ironic_agent'] | docker_image('ref') }}"
      neutron_l2gw: "{{ atmosphere_images['neutron_l2gw'] | docker_image('ref') }}"
      neutron_l3: "{{ atmosphere_images['neutron_l3'] | docker_image('ref') }}"
      neutron_linuxbridge_agent: "{{ atmosphere_images['neutron_linuxbridge_agent'] | docker_image('ref') }}"
      neutron_metadata: "{{ atmosphere_images['neutron_metadata'] | docker_image('ref') }}"
      neutron_netns_cleanup_cron: "{{ atmosphere_images['neutron_netns_cleanup_cron'] | docker_image('ref') }}"
      neutron_openvswitch_agent: "{{ atmosphere_images['neutron_openvswitch_agent'] | docker_image('ref') }}"
      neutron_server: "{{ atmosphere_images['neutron_server'] | docker_image('ref') }}"
      neutron_sriov_agent_init: "{{ atmosphere_images['neutron_sriov_agent_init'] | docker_image('ref') }}"
      neutron_sriov_agent: "{{ atmosphere_images['neutron_sriov_agent'] | docker_image('ref') }}"
      rabbit_init: "{{ atmosphere_images['rabbit_init'] | docker_image('ref') }}"
  pod:
    replicas:
      server: 3
  conf:
    paste:
      composite:neutronapi_v2_0:
        keystone: cors http_proxy_to_wsgi request_id catch_errors authtoken keystonecontext extensions neutronapiapp_v2_0
    neutron:
      DEFAULT:
        api_workers: 8
        dhcp_agents_per_network: 3
        log_config_append: null
        rpc_workers: 8
        service_plugins: qos,router,segments,trunk,vpnaas
        external_dns_driver: designate
      cors:
        allowed_origin: "*"
      nova:
        live_migration_events: true
      oslo_messaging_notifications:
        driver: noop
      service_providers:
        service_provider: VPN:strongswan:neutron_vpnaas.services.vpn.service_drivers.ipsec.IPsecVPNDriver:default
    dhcp_agent:
      DEFAULT:
        dnsmasq_dns_servers: "{{ neutron_coredns_cluster_ip | default('10.96.0.20') }}"
        enable_isolated_metadata: true
    l3_agent:
      AGENT:
        extensions: vpnaas
      vpnagent:
        vpn_device_driver: neutron_vpnaas.services.vpn.device_drivers.strongswan_ipsec.StrongSwanDriver
    metadata_agent:
      DEFAULT:
        nova_metadata_port: 8775
        metadata_proxy_shared_secret: "{{ openstack_helm_endpoints['compute_metadata']['secret'] }}"
    plugins:
      ml2_conf:
        ml2:
          extension_drivers: dns_domain_ports,port_security,qos
          type_drivers: flat,gre,vlan,vxlan
        ml2_type_gre:
          tunnel_id_ranges: 1:1000
        ml2_type_vlan:
          network_vlan_ranges: external:1:4094
  manifests:
    ingress_server: false
    service_ingress_server: false
