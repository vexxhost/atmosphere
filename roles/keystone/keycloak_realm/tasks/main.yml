# Copyright (c) 2023 VEXXHOST, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Setup realm for each ks_domain
  block:
  - name: Keycloak server health check
    ansible.builtin.uri:
      url: "https://{{ keycloak_host }}/health/ready"
      return_content: true
      validate_certs: false
    register: this
    retries: 60
    delay: 5
    until: this is not failed and "'UP' in this.content"

  - name: Create realms
    # Note(okozachenko1203): Ignoring changes in this task until the upstream issue
    #                        https://github.com/keycloak/keycloak/issues/20970 is resolved.
    changed_when: false
    community.general.keycloak_realm:
      auth_client_id: admin-cli
      auth_keycloak_url: "https://{{ keycloak_host }}"
      auth_realm: master
      auth_username: "{{ keycloak_realm_admin_username }}"
      auth_password: "{{ keycloak_realm_admin_password }}"
      id: "{{ _ks_domain.value.keycloak.realm_name }}"
      realm: "{{ _ks_domain.value.keycloak.realm_name }}"
      enabled: true
    retries: 60
    delay: 5
    register: keycloak_realm_result
    until: keycloak_realm_result is not failed

  - name: Include client roles in id token
    changed_when: false
    community.general.keycloak_clientscope:
      auth_client_id: admin-cli
      auth_keycloak_url: "https://{{ keycloak_host }}"
      auth_realm: master
      auth_username: "{{ keycloak_realm_admin_username }}"
      auth_password: "{{ keycloak_realm_admin_password }}"
      realm: "{{ _ks_domain.value.keycloak.realm_name }}"
      name: roles
      protocol_mappers:
        - name: client rolesprotocolMapper
          protocol: openid-connect
          protocolMapper: oidc-usermodel-client-role-mapper
          config:
            id.token.claim: true
            access.token.claim: true
            claim.name: "resource_access.${client_id}.roles"
            multivalued: true
  when: _ks_domain.value.keycloak is defined