# Copyright (c) 2023 VEXXHOST, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Create a temporary YAML file for Helm values
  ansible.builtin.tempfile:
    state: file
    suffix: ".yaml"
  register: _helm_upgrade_temp_values_file

- name: Write helm_upgrade_values to the temporary file
  ansible.builtin.copy:
    content: "{{ helm_upgrade_values }}"
    dest: "{{ _helm_upgrade_temp_values_file.path }}"

- name: Run helm diff to detect changes
  ansible.builtin.command:
    cmd: >
      helm diff upgrade "{{ helm_upgrade_release_name }}"
      "{{ helm_upgrade_chart_ref }}"
      --namespace "{{ helm_upgrade_release_namespace }}"
      --values "{{ _helm_upgrade_temp_values_file.path }}"
      --output dyff
  register: _helm_upgrade_diff_output
  failed_when: _helm_upgrade_diff_output.rc not in [0, 2]  # 2 means changes detected
  changed_when: false

- name: Print Helm diff output
  ansible.builtin.debug:
    msg: "{{ _helm_upgrade_diff_output.stdout_lines }}"

- name: Filter lines that don't start with a space or are not empty
  ansible.builtin.set_fact:
    _helm_upgrade_diff_filtered_lines: "{{ _helm_upgrade_diff_output.stdout_lines | select('search', '^\\S') | list }}"

- name: Format filtered lines into a list of dictionaries
  ansible.builtin.set_fact:
    _helm_upgrade_diff_formatted_lines: "{{ _helm_upgrade_diff_filtered_lines | map('regex_replace', '^(\\S+)\\s+\\(([^)]+)\\)$', '{\"path\": \"\\1\", \"resource\": \"\\2\"}') | map('from_json') | list }}"

# This outputs the list of dictionaries, whose path field is a changed path and resource field is the resource name.
#  ex:
#   [
#     {
#       "path": "spec.selector.matchLabels.component",
#       "resource": "Deployment/default/heat-api"
#     },
#     {
#       "path": "spec.selector.matchLabels.component",
#       "resource": "Deployment/default/heat-cfn"
#     }
#   ]

- name: Output diff result after helm upgrade
  ansible.builtin.debug:
    msg: "{{ _helm_upgrade_diff_formatted_lines }}"

- name: Initialize the _helm_upgrade_immutable_check list
  ansible.builtin.set_fact:
    _helm_upgrade_immutable_check: []

- name: Check if there are changes for immutable fields
  loop: "{{ _helm_upgrade_diff_formatted_lines }}"
  vars:
    is_immutable: >-
      {{
        helm_upgrade_immutable_fields | select("in", item.path) | list | length > 0
      }}
  ansible.builtin.set_fact:
    _helm_upgrade_immutable_check: "{{ _helm_upgrade_immutable_check + [{ item.resource: is_immutable }] }}"

- name: Output immutability check of changes
  ansible.builtin.debug:
    msg: "{{ _helm_upgrade_immutable_check }}"

- name: Initialize resource type lists
  ansible.builtin.set_fact:
    _helm_upgrade_orphan_delete_deployments: []
    _helm_upgrade_orphan_delete_statefulsets: []
    _helm_upgrade_orphan_delete_daemonsets: []

- name: Populate resource type lists for orphan deletion
  loop: "{{ _helm_upgrade_immutable_check }}"
  vars:
    resource_name: "{{ item.keys() | first }}"
    resource_type: "{{ resource_name.split('/')[0] }}"
  when: item.values() | first  # Only include resources with immutable changes
  ansible.builtin.set_fact:
    _helm_upgrade_orphan_delete_deployments: >-
      {{
        _helm_upgrade_orphan_delete_deployments +
        [resource_name.split('/')[-1]]
        if resource_type == "Deployment" else _helm_upgrade_orphan_delete_deployments
      }}
    _helm_upgrade_orphan_delete_statefulsets: >-
      {{
        _helm_upgrade_orphan_delete_statefulsets +
        [resource_name.split('/')[-1]]
        if resource_type == "StatefulSet" else _helm_upgrade_orphan_delete_statefulsets
      }}
    _helm_upgrade_orphan_delete_daemonsets: >-
      {{
        _helm_upgrade_orphan_delete_daemonsets +
        [resource_name.split('/')[-1]]
        if resource_type == "DaemonSet" else _helm_upgrade_orphan_delete_daemonsets
      }}

- name: Delete Deployments for immutable field change
  block:
    - name: Print Deployments before deletion
      ansible.builtin.debug:
        msg: "{{ _helm_upgrade_orphan_delete_deployments }}"

    - name: Wait for confirmation of deleting Deployments
      ansible.builtin.pause:

    - name: Delete Deployments
      kubernetes.core.k8s:
        name: testing
        api_version: apps/v1
        kind: Deployment
        state: absent
        delete_options:
          propagationPolicy: Orphan
      loop: "{{ _helm_upgrade_orphan_delete_deployments }}"

- name: Delete StatefulSets for immutable field change
  block:
    - name: Print StatefulSets before deletion
      ansible.builtin.debug:
        msg: "{{ _helm_upgrade_orphan_delete_statefulsets }}"

    - name: Wait for confirmation of deleting StatefulSets
      ansible.builtin.pause:

    - name: Delete StatefulSets
      kubernetes.core.k8s:
        name: testing
        api_version: apps/v1
        kind: StatefulSet
        state: absent
        delete_options:
          propagationPolicy: Orphan
      loop: "{{ _helm_upgrade_orphan_delete_statefulsets }}"

- name: Delete DaemonSets for immutable field change
  block:
    - name: Print DaemonSets before deletion
      ansible.builtin.debug:
        msg: "{{ _helm_upgrade_orphan_delete_daemonsets }}"

    - name: Wait for confirmation of deleting DaemonSets
      ansible.builtin.pause:

    - name: Delete DaemonSets
      kubernetes.core.k8s:
        name: testing
        api_version: apps/v1
        kind: StatefulSet
        state: absent
        delete_options:
          propagationPolicy: Orphan
      loop: "{{ _helm_upgrade_orphan_delete_daemonsets }}"

- name: Deploy Helm chart
  run_once: true
  kubernetes.core.helm:
    name: "{{ helm_upgrade_release_name }}"
    chart_ref: "{{ helm_upgrade_chart_ref }}"
    release_namespace: "{{ helm_upgrade_release_namespace }}"
    create_namespace: true
    kubeconfig: "{{ helm_upgrade_kubeconfig }}"
    values: "{{ helm_upgrade_values }}"
