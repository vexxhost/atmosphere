# Copyright (c) 2024 VEXXHOST, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

- name: Migrate existing secrets to Vault
  block:
    - name: Check if Kubernetes secret exists
      run_once: true
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Secret
        name: "{{ cluster_issuer_acme_cloudflare_secret_name }}"
        namespace: cert-manager
      register: secret_info

    - name: Set 'secret_exists' fact
      run_once: true
      ansible.builtin.set_fact:
        secret_exists: "{{ secret_info.resources | length > 0 }}"

    - name: Extract secret data if 'secret_exists'
      run_once: true
      ansible.builtin.set_fact:
        api_token: "{{ secret_info.resources[0].data['api-token'] | b64decode }}"
      when: secret_exists

    - name: Create Vault secrets
      ansible.builtin.include_role:
        name: vault_secrets
      vars:
        atmosphere_vault_over_ingress: false
        vault_secrets:
          - path: cert-manager/issuers/cloudflare
            data:
              api-token: "{{ api_token }}"
      when: secret_exists

# TODO: Use 'atmosphere.common' helm chart for external-secrets and other k8s resource creation
# For now mimic helm chart logic with plain manifests
#
# helm:
#   secrets:
#   - name: "{{ cluster_issuer_acme_cloudflare_secret_name }}"
#     values:
#       api-token: cert-manager/issuers/cloudflare/api-token

- name: Create ClusterIssuer (ExternalSecret)
  run_once: true
  kubernetes.core.k8s:
    state: present
    definition:
      - apiVersion: external-secrets.io/v1
        kind: ExternalSecret
        metadata:
          namespace: cert-manager
          name: "{{ cluster_issuer_acme_cloudflare_secret_name }}-secret" # Mimic helm chart format for simple secrets
        spec:
          refreshInterval: "60s"
          secretStoreRef:
            name: atmosphere # Mimic helm chart default secret store name and type
            kind: ClusterSecretStore
          target:
            name: "{{ cluster_issuer_acme_cloudflare_secret_name }}-secret" # Mimic helm chart format for simple secrets
          data:
            - secretKey: api-token
              remoteRef:
                key: cert-manager/issuers/cloudflare
                property: api-token

      - apiVersion: cert-manager.io/v1
        kind: ClusterIssuer
        metadata:
          name: "{{ cluster_issuer_name }}"
        spec:
          acme:
            email: "{{ cluster_issuer_acme_email }}"
            server: "{{ cluster_issuer_acme_server }}"
            privateKeySecretRef:
              name: "{{ cluster_issuer_acme_private_key_secret_name }}"
            solvers:
              - dns01:
                  cloudflare:
                    email: "{{ cluster_issuer_acme_cloudflare_email }}"
                    apiTokenSecretRef:
                      name: "{{ cluster_issuer_acme_cloudflare_secret_name }}-secret"
                      key: api-token

# - name: Create ClusterIssuer (old method)
#   run_once: true
#   kubernetes.core.k8s:
#     state: present
#     definition:
#       - apiVersion: v1
#         kind: Secret
#         metadata:
#           name: "{{ cluster_issuer_acme_cloudflare_secret_name }}"
#           namespace: cert-manager
#         type: Opaque
#         stringData:
#           api-token: "{{ cluster_issuer_acme_cloudflare_api_token }}"

#       - apiVersion: cert-manager.io/v1
#         kind: ClusterIssuer
#         metadata:
#           name: "{{ cluster_issuer_name }}"
#         spec:
#           acme:
#             email: "{{ cluster_issuer_acme_email }}"
#             server: "{{ cluster_issuer_acme_server }}"
#             privateKeySecretRef:
#               name: "{{ cluster_issuer_acme_private_key_secret_name }}"
#             solvers:
#               - dns01:
#                   cloudflare:
#                     email: "{{ cluster_issuer_acme_cloudflare_email }}"
#                     apiTokenSecretRef:
#                       name: "{{ cluster_issuer_acme_cloudflare_secret_name }}"
#                       key: api-token
