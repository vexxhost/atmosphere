From 77f21321779fa4d8611de2c7713093a8b7826b46 Mon Sep 17 00:00:00 2001
From: Dong Ma <winterma.dong@gmail.com>
Date: Tue, 10 Dec 2024 21:59:07 +0800
Subject: [PATCH 2/2] Add the support of create kubernetes resource

Add support for the OVN BGP agent to create Kuberentes
resources using the frr-k8s [1]

Refactor frr to the drvier based and new frr_k8s

[1] https://github.com/metallb/frr-k8s

Closes-Bug: #2091374
Change-Id: Iff5c965b9f67e49dae4dca5f1c590f5784c954ae
Signed-off-by: Dong Ma <winterma.dong@gmail.com>
---
 ovn_bgp_agent/config.py                       |  10 +
 .../drivers/openstack/utils/frr_k8s.py        | 322 ++++++++++++++++++
 .../drivers/openstack/utils/test_frr_k8s.py   | 161 +++++++++
 .../utils/testdata/TestSingleVRFIBGP.golden   |  35 ++
 setup.cfg                                     |   5 +
 test-requirements.txt                         |   1 +
 6 files changed, 534 insertions(+)
 create mode 100644 ovn_bgp_agent/drivers/openstack/utils/frr_k8s.py
 create mode 100644 ovn_bgp_agent/tests/unit/drivers/openstack/utils/test_frr_k8s.py
 create mode 100644 ovn_bgp_agent/tests/unit/drivers/openstack/utils/testdata/TestSingleVRFIBGP.golden

diff --git a/ovn_bgp_agent/config.py b/ovn_bgp_agent/config.py
index e43afc6..1a69b1e 100644
--- a/ovn_bgp_agent/config.py
+++ b/ovn_bgp_agent/config.py
@@ -243,6 +243,14 @@ local_ovn_cluster_opts = [
                     ' NB driver is used.'),
 ]
 
+frr_k8s_opts = [
+    cfg.StrOpt('namespace',
+               help='namespace to config frr-k8s',
+               default='frr-k8s-system'),
+    cfg.StrOpt('node_name',
+               help='Override the node name used for FRR-k8s configuration.',
+               default=None),
+]
 CONF = cfg.CONF
 EXTRA_LOG_LEVEL_DEFAULTS = [
     'oslo.privsep.daemon=INFO'
@@ -256,6 +264,7 @@ def register_opts():
     CONF.register_opts(root_helper_opts, "agent")
     CONF.register_opts(ovn_opts, "ovn")
     CONF.register_opts(local_ovn_cluster_opts, "local_ovn_cluster")
+    CONF.register_opts(frr_k8s_opts, "frr_k8s")
 
 
 def init(args, **kwargs):
@@ -283,4 +292,5 @@ def list_opts():
         ("agent", root_helper_opts),
         ("ovn", ovn_opts),
         ("local_ovn_cluster", local_ovn_cluster_opts),
+        ("frr_k8s", frr_k8s_opts),
     ]
diff --git a/ovn_bgp_agent/drivers/openstack/utils/frr_k8s.py b/ovn_bgp_agent/drivers/openstack/utils/frr_k8s.py
new file mode 100644
index 0000000..850475f
--- /dev/null
+++ b/ovn_bgp_agent/drivers/openstack/utils/frr_k8s.py
@@ -0,0 +1,322 @@
+# Copyright 2024 VEXXHOST, Inc.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#   http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+from jinja2 import Template
+from kubernetes import client
+from kubernetes import config
+from oslo_config import cfg
+from oslo_log import log as logging
+
+from ovn_bgp_agent import constants
+from ovn_bgp_agent.drivers import driver_api
+from ovn_bgp_agent.drivers.openstack.utils import ovs
+
+CONF = cfg.CONF
+
+LOG = logging.getLogger(__name__)
+
+DEFAULT_REDISTRIBUTE = {'connected'}
+
+CONFIGURE_ND_TEMPLATE = '''
+interface {{ intf }}
+{% if is_dhcpv6 %}
+ ipv6 nd managed-config-flag
+{% endif %}
+{% for server in dns_servers %}
+ ipv6 nd rdnss {{ server }}
+{% endfor %}
+ ipv6 nd prefix {{ prefix }}
+ no ipv6 nd suppress-ra
+exit
+'''
+
+ADD_VRF_TEMPLATE = '''
+vrf {{ vrf_name }}
+  vni {{ vni }}
+exit-vrf
+
+router bgp {{ bgp_as }} vrf {{ vrf_name }}
+  address-family ipv4 unicast
+{% for redist in redistribute %}
+    redistribute {{ redist }}
+{% endfor %}
+  exit-address-family
+  address-family ipv6 unicast
+{% for redist in redistribute %}
+    redistribute {{ redist }}
+{% endfor %}
+  exit-address-family
+  address-family l2vpn evpn
+    advertise ipv4 unicast
+    advertise ipv6 unicast
+{% if route_distinguishers|length > 0 %}
+    rd {{ route_distinguishers[0] }}
+{% else %}
+    rd {{ local_ip }}:{{ vni }}
+{% endif %}
+{% for route_target in route_targets %}
+    route-target import {{ route_target }}
+    route-target export {{ route_target }}
+{% endfor %}
+{% for route_target in export_targets %}
+    route-target export {{ route_target }}
+{% endfor %}
+{% for route_target in import_targets %}
+    route-target import {{ route_target }}
+{% endfor %}
+  exit-address-family
+
+'''
+
+DEL_VRF_TEMPLATE = '''
+no vrf {{ vrf_name }}
+no interface veth-{{ vrf_name }}
+no router bgp {{ bgp_as }} vrf {{ vrf_name }}
+
+'''
+
+LEAK_VRF_TEMPLATE = '''
+router bgp {{ bgp_as }} vrf {{ vrf_name }}
+  bgp router-id {{ bgp_router_id }}
+  address-family ipv4 unicast
+{% for redist in redistribute %}
+    redistribute {{ redist }}
+{% endfor %}
+  exit-address-family
+
+  address-family ipv6 unicast
+{% for redist in redistribute %}
+    redistribute {{ redist }}
+{% endfor %}
+  exit-address-family
+
+'''
+
+
+class FRRK8sDriver(driver_api.BGPDriverBase):
+    def __init__(self):
+        config.load_incluster_config()
+
+        self.namespace = CONF.frr_k8s.namespace
+        self.api_instance = client.CustomObjectsApi()
+
+        self.ovs_idl = ovs.OvsIdl()
+        self.ovs_idl.start(CONF.ovsdb_connection)
+        if CONF.frr_k8s.node_name:
+            self.chassis = CONF.frr_k8s.node_name
+        else:
+            self.chassis = self.ovs_idl.get_own_chassis_name()
+
+    def nd_reconfigure(self, interface, prefix, opts):
+        LOG.info('FRR IPv6 ND reconfiguration (intf %s, prefix %s)', interface,
+                 prefix)
+        nd_template = Template(CONFIGURE_ND_TEMPLATE)
+
+        # Need to define what setting is for SLAAC
+        if (not opts.get('dhcpv6_stateless', False) or
+                opts.get('dhcpv6_stateless', '') not in ('true', True)):
+            prefix += ' no-autoconfig'
+
+        # Parse dns servers from dhcp options.
+        dns_servers = []
+        if opts.get('dns_server'):
+            dns_servers = [
+                s.strip()
+                for s in opts['dns_server'][1:-1].split(',')
+            ]
+
+        is_dhcpv6 = True  # Need a better way to define this one.
+
+        nd_config = nd_template.render(
+            intf=interface,
+            prefix=prefix,
+            dns_servers=dns_servers,
+            is_dhcpv6=is_dhcpv6,
+        )
+
+        resource = {
+            "metadata": {
+                "name": self._resource_name(f"nd-{interface}"),
+            },
+            "spec": {
+                "raw": {
+                    "priority": 5,
+                    "rawConfig": nd_config,
+                },
+            },
+        }
+
+        self._create_or_update_config(resource)
+
+    def vrf_leak(self, vrf, bgp_as, bgp_router_id=None):
+        LOG.info("Add VRF leak for VRF %s on router bgp %s", vrf, bgp_as)
+        if not bgp_router_id:
+            LOG.error("Unknown router-id, needed for route leaking")
+            return
+
+        vrf_template = Template(LEAK_VRF_TEMPLATE)
+        vrf_config = vrf_template.render(vrf_name=vrf, bgp_as=bgp_as,
+                                         redistribute=DEFAULT_REDISTRIBUTE,
+                                         bgp_router_id=bgp_router_id)
+
+        resource = {
+            "metadata": {
+                "name": self._resource_name(vrf),
+            },
+            "spec": {
+                "bgp": {
+                    "routers": [
+                        {
+                            "asn": int(bgp_as),
+                            "imports": [
+                                {
+                                    "vrf": vrf,
+                                }
+                            ]
+                        },
+                        {
+                            "asn": int(bgp_as),
+                            "id": bgp_router_id,
+                            "vrf": vrf,
+                        }
+                    ],
+                },
+                "raw": {
+                    "priority": 5,
+                    "rawConfig": vrf_config,
+                },
+            },
+        }
+
+        self._create_or_update_config(resource)
+
+    def vrf_reconfigure(self, evpn_info, action):
+        LOG.info("FRR reconfiguration (action = %s) for evpn: %s",
+                 action, evpn_info)
+
+        # If we have more actions, we can define them in this list.
+        vrf_templates = {
+            'add-vrf': ADD_VRF_TEMPLATE,
+            'del-vrf': DEL_VRF_TEMPLATE,
+        }
+        if action not in vrf_templates:
+            LOG.error("Unknown FRR reconfiguration action: %s", action)
+            return
+
+        # Set default opts, so all params are available for the templates
+        # Then update them with evpn_info
+        opts = dict(route_targets=[], route_distinguishers=[],
+                    export_targets=[], import_targets=[],
+                    local_ip=CONF.evpn_local_ip,
+                    redistribute=DEFAULT_REDISTRIBUTE,
+                    bgp_as=CONF.bgp_AS, vrf_name='', vni=0)
+        opts.update(evpn_info)
+
+        if not opts['vrf_name']:
+            opts['vrf_name'] = "{}{}".format(constants.OVN_EVPN_VRF_PREFIX,
+                                             evpn_info['vni'])
+
+        vrf_template = Template(vrf_templates.get(action))
+        vrf_config = vrf_template.render(**opts)
+
+        if action == "add-vrf":
+            resource = {
+                "metadata": {
+                    "name": self._resource_name(opts['vrf_name']),
+                },
+                "spec": {
+                    "raw": {
+                        "priority": 5,
+                        "rawConfig": vrf_config,
+                    },
+                },
+            }
+            self._create_or_update_config(resource)
+        elif action == "del-vrf":
+            self._delete_config(self._resource_name(opts['vrf_name']))
+
+    def set_default_redistribute(self, redist_opts):
+        if not isinstance(redist_opts, set):
+            redist_opts = set(redist_opts)
+
+        if redist_opts == DEFAULT_REDISTRIBUTE:
+            # no update required.
+            return
+
+        DEFAULT_REDISTRIBUTE.clear()
+        DEFAULT_REDISTRIBUTE.update(redist_opts)
+
+    def _resource_name(self, vrf_name):
+        return f"{self.chassis}-{vrf_name}"
+
+    def _create_config(self, resource):
+        try:
+            self.api_instance.create_namespaced_custom_object(
+                group="frrk8s.metallb.io",
+                version="v1beta1",
+                namespace=CONF.frr_k8s.namespace,
+                plural="frrconfigurations",
+                body=resource,
+            )
+        except client.exceptions.ApiException as e:
+            LOG.error("Exception when creating FRRConfiguration: %s", e)
+
+    def _create_or_update_config(self, resource):
+        resource["apiVersion"] = "frrk8s.metallb.io/v1beta1"
+        resource["kind"] = "FRRConfiguration"
+        resource["metadata"]["namespace"] = CONF.frr_k8s.namespace
+        resource["spec"]["nodeSelector"] = {
+            "matchLabels": {
+                "kubernetes.io/hostname": self.chassis,
+            }
+        }
+
+        try:
+            frr_config = self.api_instance.get_namespaced_custom_object(
+                group="frrk8s.metallb.io",
+                version="v1beta1",
+                namespace=resource["metadata"]["namespace"],
+                plural="frrconfigurations",
+                name=resource["metadata"]["name"]
+            )
+
+            resource["metadata"]["resourceVersion"] = \
+                frr_config["metadata"]["resourceVersion"]
+            self.api_instance.replace_namespaced_custom_object(
+                group="frrk8s.metallb.io",
+                version="v1beta1",
+                namespace=resource["metadata"]["namespace"],
+                plural="frrconfigurations",
+                name=resource["metadata"]["name"],
+                body=resource,
+            )
+        except client.exceptions.ApiException as e:
+            if e.status == 404:
+                return self._create_config(resource)
+            LOG.error("Exception when retrieving FRRConfiguration.")
+
+    def _delete_config(self, name):
+        try:
+            self.api_instance.delete_namespaced_custom_object(
+                group="frrk8s.metallb.io",
+                version="v1beta1",
+                namespace=CONF.frr_k8s.namespace,
+                plural="frrconfigurations",
+                name=name,
+            )
+        except client.exceptions.ApiException as e:
+            if e.status == 404:
+                LOG.info("FRRConfiguration %s not found", name)
+                return
+            LOG.error("Exception when deleting FRRConfiguration: %s", e)
diff --git a/ovn_bgp_agent/tests/unit/drivers/openstack/utils/test_frr_k8s.py b/ovn_bgp_agent/tests/unit/drivers/openstack/utils/test_frr_k8s.py
new file mode 100644
index 0000000..5079473
--- /dev/null
+++ b/ovn_bgp_agent/tests/unit/drivers/openstack/utils/test_frr_k8s.py
@@ -0,0 +1,161 @@
+# Copyright 2024 VEXXHOST, Inc.
+# All Rights Reserved.
+#
+#    Licensed under the Apache License, Version 2.0 (the "License"); you may
+#    not use this file except in compliance with the License. You may obtain
+#    a copy of the License at
+#
+#         http://www.apache.org/licenses/LICENSE-2.0
+#
+#    Unless required by applicable law or agreed to in writing, software
+#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+#    License for the specific language governing permissions and limitations
+#    under the License.
+
+import json
+import os
+
+from unittest import mock
+
+from oslo_config import cfg
+
+from kubernetes import client
+from kubernetes import config
+from ovn_bgp_agent.drivers.openstack.utils import frr_k8s
+from ovn_bgp_agent.drivers.openstack.utils import ovs
+from ovn_bgp_agent.tests import base as test_base
+
+
+CONF = cfg.CONF
+
+
+class TestFrrK8s(test_base.TestCase):
+
+    @mock.patch.object(config, "load_incluster_config")
+    @mock.patch.object(client, "CustomObjectsApi")
+    @mock.patch.object(ovs, "OvsIdl")
+    def setUp(self, mock_ovsidl, mock_custom_objects_api,
+              mock_load_incluster_config):
+        super(TestFrrK8s, self).setUp()
+        self.frr_driver = frr_k8s.FRRK8sDriver()
+        self.frr_driver.chassis = 'test-chassis'
+        self.frr_driver.ovs_idl = mock.MagicMock()
+        self.frr_driver.ovs_idl.get_own_chassis_name.return_value =\
+            'test-chassis'
+        self.frr_driver.api_instance = mock.MagicMock()
+
+    def load_golden_file(self, filename):
+        data = {}
+        file_path = os.path.join(os.path.dirname(__file__), filename)
+        if os.path.isfile(file_path):
+            with open(file_path, 'r') as f:
+                file_content = f.read().strip()
+                if file_content:
+                    data = json.loads(file_content)
+        return data
+
+    def test_SingleVRFIBGP(self):
+        test_case = 'TestSingleVRFIBGP'
+        vrf = 'fake-vrf'
+        bgp_as = 100
+        router_id = '10.1.1.254'
+
+        self.frr_driver.vrf_leak(vrf, bgp_as, router_id)
+
+        expected_data = self.load_golden_file(
+            'testdata/' + test_case + '.golden'
+        )
+
+        self.frr_driver.api_instance.get_namespaced_custom_object.\
+            assert_called_once_with(
+                group="frrk8s.metallb.io",
+                version="v1beta1",
+                namespace=CONF.frr_k8s.namespace,
+                plural="frrconfigurations",
+                name=f"{self.frr_driver.chassis}-{vrf}"
+            )
+
+        expected_data['metadata']["resourceVersion"] = mock.ANY
+        self.frr_driver.api_instance.replace_namespaced_custom_object.\
+            assert_called_once_with(
+                group="frrk8s.metallb.io",
+                version="v1beta1",
+                namespace=CONF.frr_k8s.namespace,
+                plural="frrconfigurations",
+                name=f"{self.frr_driver.chassis}-{vrf}",
+                body={
+                    "metadata": expected_data['metadata'],
+                    "spec": expected_data['spec'],
+                    "apiVersion": "frrk8s.metallb.io/v1beta1",
+                    "kind": "FRRConfiguration"
+                },
+            )
+
+    @mock.patch.object(frr_k8s.FRRK8sDriver, '_create_or_update_config')
+    def test_nd_reconfigure(self, mock_create_or_update):
+        interface = 'eth0'
+        prefix = '2001:db8::/64'
+        opts = {'dns_server': '[2001:db8::1, 2001:db8::2]'}
+        self.frr_driver.nd_reconfigure(interface, prefix, opts)
+        mock_create_or_update.assert_called_once()
+
+        opts_dhcpv6 = {
+            'dns_server': '[2001:db8::1, 2001:db8::2]',
+            'dhcpv6_stateless': True
+        }
+        self.frr_driver.nd_reconfigure(interface, prefix, opts_dhcpv6)
+        mock_create_or_update.assert_called()
+
+    @mock.patch.object(frr_k8s.FRRK8sDriver, '_create_or_update_config')
+    @mock.patch.object(frr_k8s.FRRK8sDriver, '_delete_config')
+    def test_vrf_reconfigure(self, mock_delete, mock_create_or_update):
+        evpn_info = {'vni': 100, 'route_targets': ['65000:100']}
+        self.frr_driver.vrf_reconfigure(evpn_info, 'add-vrf')
+        mock_create_or_update.assert_called_once()
+        self.frr_driver.vrf_reconfigure(evpn_info, 'del-vrf')
+        mock_delete.assert_called_once()
+
+        self.frr_driver.vrf_reconfigure(evpn_info, 'unknown-action')
+        mock_create_or_update.assert_called_once()
+        mock_delete.assert_called_once()
+
+    def test_resource_name(self):
+        vrf_name = 'test-vrf'
+        expected_name = 'test-chassis-test-vrf'
+        self.assertEqual(
+            self.frr_driver._resource_name(vrf_name),
+            expected_name
+        )
+
+    def test_create_config(self):
+        resource = {'metadata': {'name': 'test-resource'}}
+        self.frr_driver._create_config(resource)
+        self.frr_driver.api_instance.create_namespaced_custom_object.\
+            assert_called_once()
+
+        self.frr_driver.api_instance.create_namespaced_custom_object.\
+            side_effect = client.exceptions.ApiException(status=400)
+        self.frr_driver._create_config(resource)
+        self.frr_driver.api_instance.create_namespaced_custom_object.\
+            assert_called()
+
+    @mock.patch.object(frr_k8s.FRRK8sDriver, '_create_config')
+    def test_create_or_update_config(self, mock_create_config):
+        resource = {'metadata': {'name': 'test-resource'}, 'spec': {}}
+        self.frr_driver.api_instance.get_namespaced_custom_object.\
+            return_value = {'metadata': {'resourceVersion': '1'}}
+        self.frr_driver._create_or_update_config(resource)
+        self.frr_driver.api_instance.replace_namespaced_custom_object.\
+            assert_called_once()
+
+        self.frr_driver.api_instance.get_namespaced_custom_object.\
+            side_effect = client.exceptions.ApiException(status=404)
+        self.frr_driver._create_or_update_config(resource)
+        mock_create_config.assert_called()
+
+        self.frr_driver.api_instance.get_namespaced_custom_object.\
+            side_effect = client.exceptions.ApiException(status=400)
+        self.frr_driver._create_or_update_config(resource)
+        self.frr_driver.api_instance.replace_namespaced_custom_object.\
+            assert_called_once()
diff --git a/ovn_bgp_agent/tests/unit/drivers/openstack/utils/testdata/TestSingleVRFIBGP.golden b/ovn_bgp_agent/tests/unit/drivers/openstack/utils/testdata/TestSingleVRFIBGP.golden
new file mode 100644
index 0000000..2487918
--- /dev/null
+++ b/ovn_bgp_agent/tests/unit/drivers/openstack/utils/testdata/TestSingleVRFIBGP.golden
@@ -0,0 +1,35 @@
+{
+    "metadata": {
+        "name": "test-chassis-fake-vrf",
+        "namespace": "frr-k8s-system"
+    },
+    "spec": {
+        "bgp": {
+            "routers": [
+                {
+                    "asn": 100,
+                    "imports": [
+                        {
+                            "vrf": "fake-vrf"
+                        }
+                    ]
+                },
+                {
+                    "asn": 100,
+                    "id": "10.1.1.254",
+                    "vrf": "fake-vrf"
+                }
+            ]
+        },
+        "raw": {
+            "priority": 5,
+            "rawConfig": "\nrouter bgp 100 vrf fake-vrf\n  bgp router-id 10.1.1.254\n  address-family ipv4 unicast\n\n    redistribute connected\n\n  exit-address-family\n\n  address-family ipv6 unicast\n\n    redistribute connected\n\n  exit-address-family\n"
+        },
+        "nodeSelector": {
+            "matchLabels": {
+                "kubernetes.io/hostname": "test-chassis"
+            }
+        }
+    },
+    "status": {}
+}
diff --git a/setup.cfg b/setup.cfg
index f0c43a7..707a9fc 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -42,6 +42,11 @@ ovn_bgp_agent.drivers =
 
 ovn_bgp_agent.bgp_drivers =
     frr = ovn_bgp_agent.drivers.openstack.utils.frr:FRRDriver
+    frr_k8s = ovn_bgp_agent.drivers.openstack.utils.frr_k8s:FRRK8sDriver
 
 oslo.config.opts =
     ovnbgpagent = ovn_bgp_agent.config:list_opts
+
+[extras]
+frr-k8s =
+    kubernetes>=24.2.0
diff --git a/test-requirements.txt b/test-requirements.txt
index 8e2cc74..ef0486b 100644
--- a/test-requirements.txt
+++ b/test-requirements.txt
@@ -11,3 +11,4 @@ oslotest>=1.10.0 # Apache-2.0
 pyroute2>=0.6.4;sys_platform!='win32' # Apache-2.0 (+ dual licensed GPL2)
 stestr>=1.0.0 # Apache-2.0
 testtools>=1.4.0 # MIT
+kubernetes>=24.2.0 # Apache-2.0
-- 
2.34.1

