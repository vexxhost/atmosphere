From 687cba92140190c3d21d1f0dce07a93befa449df Mon Sep 17 00:00:00 2001
From: Mohammed Naser <mnaser@vexxhost.com>
Date: Thu, 13 Mar 2025 17:48:21 -0400
Subject: [PATCH 1/2] Implement driver concept for BGP agent

This will allow users to plug in their own methods of exposing
routes, even out of tree to avoid having additional maintenance
burden on upstream.

Co-Authored-By: Dong Ma <winterma.dong@gmail.com>
Change-Id: I97cc32d549fb9be53739331f30bfa61d381bda8b
---
 ovn_bgp_agent/config.py                       |   3 +
 ovn_bgp_agent/drivers/driver_api.py           |  33 +++
 .../drivers/openstack/ovn_evpn_driver.py      |   8 +-
 .../openstack/ovn_stretched_l2_bgp_driver.py  |   7 +-
 ovn_bgp_agent/drivers/openstack/utils/bgp.py  |  12 +-
 ovn_bgp_agent/drivers/openstack/utils/evpn.py |  12 +-
 ovn_bgp_agent/drivers/openstack/utils/frr.py  | 201 +++++++++---------
 .../openstack/test_nb_ovn_bgp_driver.py       |  10 +-
 .../drivers/openstack/test_ovn_bgp_driver.py  |  10 +-
 .../drivers/openstack/test_ovn_evpn_driver.py |   4 +-
 .../test_ovn_stretched_l2_bgp_driver.py       |  10 +-
 .../unit/drivers/openstack/utils/test_bgp.py  |   7 +-
 .../unit/drivers/openstack/utils/test_evpn.py |   7 +-
 .../unit/drivers/openstack/utils/test_frr.py  |  21 +-
 setup.cfg                                     |   3 +
 15 files changed, 202 insertions(+), 146 deletions(-)

diff --git a/ovn_bgp_agent/config.py b/ovn_bgp_agent/config.py
index d704ecb..e43afc6 100644
--- a/ovn_bgp_agent/config.py
+++ b/ovn_bgp_agent/config.py
@@ -66,6 +66,9 @@ agent_opts = [
                choices=('ovn_bgp_driver', 'ovn_evpn_driver',
                         'ovn_stretched_l2_bgp_driver', 'nb_ovn_bgp_driver'),
                default='ovn_bgp_driver'),
+    cfg.StrOpt('bgp_driver',
+               help='BGP Driver to be used for exposing/witdrawing routes',
+               default='frr'),
     cfg.StrOpt('ovsdb_connection',
                default='unix:/usr/local/var/run/openvswitch/db.sock',
                help='The connection string for the native OVSDB backend.\n'
diff --git a/ovn_bgp_agent/drivers/driver_api.py b/ovn_bgp_agent/drivers/driver_api.py
index 5a657a0..174f161 100644
--- a/ovn_bgp_agent/drivers/driver_api.py
+++ b/ovn_bgp_agent/drivers/driver_api.py
@@ -1,4 +1,5 @@
 # Copyright 2021 Red Hat, Inc.
+# Copyright 2024 VEXXHOST, Inc.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
@@ -54,3 +55,35 @@ class AgentDriverBase(object, metaclass=abc.ABCMeta):
     @abc.abstractmethod
     def withdraw_subnet(self, subnet):
         raise NotImplementedError()
+
+
+class BGPDriverBase(object, metaclass=abc.ABCMeta):
+    """Base class for BGP drivers.
+
+    """
+
+    @classmethod
+    def get_instance(cls, specific_driver):
+        bgp_driver = stevedore_driver.DriverManager(
+            namespace='ovn_bgp_agent.bgp_drivers',
+            name=specific_driver,
+            invoke_on_load=True
+        ).driver
+
+        return bgp_driver
+
+    @abc.abstractmethod
+    def nd_reconfigure(self, interface, prefix, opts):
+        raise NotImplementedError()
+
+    @abc.abstractmethod
+    def vrf_leak(self, vrf, bgp_as, bgp_router_id=None):
+        raise NotImplementedError()
+
+    @abc.abstractmethod
+    def vrf_reconfigure(self, evpn_info, action):
+        raise NotImplementedError()
+
+    @abc.abstractmethod
+    def set_default_redistribute(self, redist_opts):
+        raise NotImplementedError()
diff --git a/ovn_bgp_agent/drivers/openstack/ovn_evpn_driver.py b/ovn_bgp_agent/drivers/openstack/ovn_evpn_driver.py
index 49cb2aa..e4a7712 100644
--- a/ovn_bgp_agent/drivers/openstack/ovn_evpn_driver.py
+++ b/ovn_bgp_agent/drivers/openstack/ovn_evpn_driver.py
@@ -22,7 +22,6 @@ from oslo_log import log as logging
 
 from ovn_bgp_agent import constants
 from ovn_bgp_agent.drivers import driver_api
-from ovn_bgp_agent.drivers.openstack.utils import frr
 from ovn_bgp_agent.drivers.openstack.utils import ovn
 from ovn_bgp_agent.drivers.openstack.utils import ovs
 from ovn_bgp_agent.drivers.openstack.watchers import base_watcher
@@ -46,6 +45,9 @@ EVPN_INFO = collections.namedtuple(
 class OVNEVPNDriver(driver_api.AgentDriverBase):
 
     def __init__(self):
+        self.bgp_driver = driver_api.BGPDriverBase.get_instance(
+            CONF.bgp_driver)
+
         self.ovn_bridge_mappings = {}  # {'public': 'br-ex'}
         self.ovn_local_cr_lrps = {}
         self.ovn_local_lrps = {}
@@ -242,7 +244,7 @@ class OVNEVPNDriver(driver_api.AgentDriverBase):
             'vlan': evpn_devices.vlan_name
         }
 
-        frr.vrf_reconfigure(evpn_info, action="add-vrf")
+        self.bgp_driver.vrf_reconfigure(evpn_info, action="add-vrf")
 
         self._connect_evpn_to_ovn(evpn_devices.vrf_name, evpn_devices.veth_vrf,
                                   evpn_devices.veth_ovs, ips, datapath_bridge,
@@ -326,7 +328,7 @@ class OVNEVPNDriver(driver_api.AgentDriverBase):
                                          cr_lrp_info.get('mac'))
 
         evpn_info = {'vni': evpn_vni, 'bgp_as': cr_lrp_info.get('bgp_as')}
-        frr.vrf_reconfigure(evpn_info, action="del-vrf")
+        self.bgp_driver.vrf_reconfigure(evpn_info, action="del-vrf")
 
         try:
             del self.ovn_local_cr_lrps[cr_lrp_port_name]
diff --git a/ovn_bgp_agent/drivers/openstack/ovn_stretched_l2_bgp_driver.py b/ovn_bgp_agent/drivers/openstack/ovn_stretched_l2_bgp_driver.py
index 9eec639..575bb8a 100644
--- a/ovn_bgp_agent/drivers/openstack/ovn_stretched_l2_bgp_driver.py
+++ b/ovn_bgp_agent/drivers/openstack/ovn_stretched_l2_bgp_driver.py
@@ -25,7 +25,6 @@ from ovn_bgp_agent import constants
 from ovn_bgp_agent.drivers import driver_api
 from ovn_bgp_agent.drivers.openstack.utils import bgp as bgp_utils
 from ovn_bgp_agent.drivers.openstack.utils import driver_utils
-from ovn_bgp_agent.drivers.openstack.utils import frr
 from ovn_bgp_agent.drivers.openstack.utils import ovn
 from ovn_bgp_agent.drivers.openstack.utils import ovs
 from ovn_bgp_agent.drivers.openstack.watchers import bgp_watcher as watcher
@@ -48,6 +47,9 @@ class HashedRoute:
 
 class OVNBGPStretchedL2Driver(driver_api.AgentDriverBase):
     def __init__(self):
+        self.bgp_driver = driver_api.BGPDriverBase.get_instance(
+            CONF.bgp_driver)
+
         self.ovn_local_cr_lrps = {}
         self.vrf_routes = set()
         self.ovn_routing_tables_routes = collections.defaultdict()
@@ -72,8 +74,7 @@ class OVNBGPStretchedL2Driver(driver_api.AgentDriverBase):
         self.ovs_idl.start(CONF.ovsdb_connection)
 
         # Base BGP configuration
-        # Ensure FRR is configured to leak only kernel routes by default
-        frr.set_default_redistribute(['kernel'])
+        self.bgp_driver.set_default_redistribute(['kernel'])
         bgp_utils.ensure_base_bgp_configuration()
 
         # Clear vrf routing table
diff --git a/ovn_bgp_agent/drivers/openstack/utils/bgp.py b/ovn_bgp_agent/drivers/openstack/utils/bgp.py
index e4a388c..658f540 100644
--- a/ovn_bgp_agent/drivers/openstack/utils/bgp.py
+++ b/ovn_bgp_agent/drivers/openstack/utils/bgp.py
@@ -16,9 +16,9 @@ from oslo_config import cfg
 from oslo_log import log as logging
 
 from ovn_bgp_agent import constants
+from ovn_bgp_agent.drivers import driver_api
 from ovn_bgp_agent.drivers.openstack.utils import driver_utils
 from ovn_bgp_agent.drivers.openstack.utils import evpn
-from ovn_bgp_agent.drivers.openstack.utils import frr
 from ovn_bgp_agent.utils import linux_net
 
 
@@ -67,22 +67,24 @@ def withdraw_ips(port_ips, ips_info=None):
     linux_net.del_ips_from_dev(CONF.bgp_nic, port_ips)
 
 
-def ensure_base_bgp_configuration(template=frr.LEAK_VRF_TEMPLATE):
+def ensure_base_bgp_configuration():
     if CONF.exposing_method not in [constants.EXPOSE_METHOD_UNDERLAY,
                                     constants.EXPOSE_METHOD_DYNAMIC,
                                     constants.EXPOSE_METHOD_OVN]:
         return
 
+    bgp_driver = driver_api.BGPDriverBase.get_instance(
+        CONF.bgp_driver)
+
     # Create VRF
     linux_net.ensure_vrf(CONF.bgp_vrf, CONF.bgp_vrf_table_id)
 
     # If we expose subnet routes, we should add kernel routes too.
     if CONF.advertisement_method_tenant_networks == 'subnet':
-        frr.set_default_redistribute(['connected', 'kernel'])
+        bgp_driver.set_default_redistribute(['connected', 'kernel'])
 
     # Ensure FRR is configure to leak the routes
-    frr.vrf_leak(CONF.bgp_vrf, CONF.bgp_AS, CONF.bgp_router_id,
-                 template=template)
+    bgp_driver.vrf_leak(CONF.bgp_vrf, CONF.bgp_AS, CONF.bgp_router_id)
 
     # Create OVN dummy device
     linux_net.ensure_ovn_device(CONF.bgp_nic, CONF.bgp_vrf)
diff --git a/ovn_bgp_agent/drivers/openstack/utils/evpn.py b/ovn_bgp_agent/drivers/openstack/utils/evpn.py
index 40def89..a4628d6 100644
--- a/ovn_bgp_agent/drivers/openstack/utils/evpn.py
+++ b/ovn_bgp_agent/drivers/openstack/utils/evpn.py
@@ -19,8 +19,8 @@ from oslo_config import cfg
 from oslo_log import log as logging
 
 from ovn_bgp_agent import constants
+from ovn_bgp_agent.drivers import driver_api
 from ovn_bgp_agent.drivers.openstack.utils import driver_utils
-from ovn_bgp_agent.drivers.openstack.utils import frr
 from ovn_bgp_agent.drivers.openstack.utils import ovs
 from ovn_bgp_agent import exceptions
 from ovn_bgp_agent.utils import linux_net
@@ -44,6 +44,9 @@ class EvpnBridge:
                       "VXLAN local ip")
             raise exceptions.ConfOptionRequired(option='evpn_local_ip')
 
+        self.bgp_driver = driver_api.BGPDriverBase.get_instance(
+            CONF.bgp_driver)
+
         self.ovs_bridge = ovs_bridge
         self.vni = vni
         self.mode = mode
@@ -84,7 +87,7 @@ class EvpnBridge:
         linux_net.disable_learning_vxlan_intf(self.vxlan_name)
 
         LOG.debug('Configure FRR VRF (add)')
-        frr.vrf_reconfigure(self.evpn_opts, 'add-vrf')
+        self.bgp_driver.vrf_reconfigure(self.evpn_opts, 'add-vrf')
 
         if self.mode == constants.OVN_EVPN_TYPE_L3:
             LOG.debug('Create L3 EVPN devices')
@@ -120,7 +123,7 @@ class EvpnBridge:
             # otherwise, frr will throw an error that it can only delete
             # inactive vrf's
             LOG.debug('Configure FRR VRF (del)')
-            frr.vrf_reconfigure(self.evpn_opts, action="del-vrf")
+            self.bgp_driver.vrf_reconfigure(self.evpn_opts, action="del-vrf")
 
         self._setup_done = False
 
@@ -342,7 +345,8 @@ class VlanDev:
                 self.configure_nd(opt.cidr, opts=opt.options)
 
     def configure_nd(self, cidr, opts):
-        self._run(frr.nd_reconfigure, self.veth_vrf, cidr, opts)
+        bgp_driver = driver_api.BGPDriverBase.get_instance(CONF.bgp_driver)
+        self._run(bgp_driver.nd_reconfigure, self.veth_vrf, cidr, opts)
 
     def add_ips(self, ips: list):
         self._custom_ips.update(ips)
diff --git a/ovn_bgp_agent/drivers/openstack/utils/frr.py b/ovn_bgp_agent/drivers/openstack/utils/frr.py
index e35e4b9..a5c8f07 100644
--- a/ovn_bgp_agent/drivers/openstack/utils/frr.py
+++ b/ovn_bgp_agent/drivers/openstack/utils/frr.py
@@ -20,6 +20,7 @@ from oslo_config import cfg
 from oslo_log import log as logging
 
 from ovn_bgp_agent import constants
+from ovn_bgp_agent.drivers import driver_api
 import ovn_bgp_agent.privileged.vtysh
 
 CONF = cfg.CONF
@@ -113,111 +114,111 @@ router bgp {{ bgp_as }} vrf {{ vrf_name }}
 '''
 
 
-def _get_router_id():
-    output = ovn_bgp_agent.privileged.vtysh.run_vtysh_command(
-        command='show ip bgp summary json')
-    return json.loads(output).get('ipv4Unicast', {}).get('routerId')
-
-
-def _run_vtysh_config_with_tempfile(vrf_config):
-    try:
-        f = tempfile.NamedTemporaryFile(mode='w')
-        f.write(vrf_config)
-        f.flush()
-    except (IOError, OSError) as e:
-        LOG.error('Failed to create the VRF configuration '
-                  'file. Error: %s', e)
-        if f is not None:
-            f.close()
-        raise
-
-    try:
-        ovn_bgp_agent.privileged.vtysh.run_vtysh_config(f.name)
-    finally:
-        if f is not None:
-            f.close()
-
-
-def set_default_redistribute(redist_opts):
-    if not isinstance(redist_opts, set):
-        redist_opts = set(redist_opts)
-
-    if redist_opts == DEFAULT_REDISTRIBUTE:
-        # no update required.
-        return
-
-    DEFAULT_REDISTRIBUTE.clear()
-    DEFAULT_REDISTRIBUTE.update(redist_opts)
-
-
-def nd_reconfigure(interface, prefix, opts):
-    LOG.info('FRR IPv6 ND reconfiguration (intf %s, prefix %s)', interface,
-             prefix)
-    nd_template = Template(CONFIGURE_ND_TEMPLATE)
-
-    # Need to define what setting is for SLAAC
-    if (not opts.get('dhcpv6_stateless', False) or
-            opts.get('dhcpv6_stateless', '') not in ('true', True)):
-        prefix += ' no-autoconfig'
+class FRRDriver(driver_api.BGPDriverBase):
+    def _get_router_id(self):
+        output = ovn_bgp_agent.privileged.vtysh.run_vtysh_command(
+            command='show ip bgp summary json')
+        return json.loads(output).get('ipv4Unicast', {}).get('routerId')
+
+    def _run_vtysh_config_with_tempfile(self, vrf_config):
+        try:
+            f = tempfile.NamedTemporaryFile(mode='w')
+            f.write(vrf_config)
+            f.flush()
+        except (IOError, OSError) as e:
+            LOG.error('Failed to create the VRF configuration '
+                      'file. Error: %s', e)
+            if f is not None:
+                f.close()
+            raise
+
+        try:
+            ovn_bgp_agent.privileged.vtysh.run_vtysh_config(f.name)
+        finally:
+            if f is not None:
+                f.close()
+
+    def nd_reconfigure(self, interface, prefix, opts):
+        LOG.info('FRR IPv6 ND reconfiguration (intf %s, prefix %s)', interface,
+                 prefix)
+        nd_template = Template(CONFIGURE_ND_TEMPLATE)
+
+        # Need to define what setting is for SLAAC
+        if (not opts.get('dhcpv6_stateless', False) or
+                opts.get('dhcpv6_stateless', '') not in ('true', True)):
+            prefix += ' no-autoconfig'
+
+        # Parse dns servers from dhcp options.
+        dns_servers = []
+        if opts.get('dns_server'):
+            dns_servers = [
+                s.strip()
+                for s in opts['dns_server'][1:-1].split(',')
+            ]
+
+        is_dhcpv6 = True  # Need a better way to define this one.
+
+        nd_config = nd_template.render(
+            intf=interface,
+            prefix=prefix,
+            dns_servers=dns_servers,
+            is_dhcpv6=is_dhcpv6,
+        )
+
+        self._run_vtysh_config_with_tempfile(nd_config)
+
+    def vrf_leak(self, vrf, bgp_as, bgp_router_id=None):
+        LOG.info("Add VRF leak for VRF %s on router bgp %s", vrf, bgp_as)
+        if not bgp_router_id:
+            bgp_router_id = self._get_router_id()
+            if not bgp_router_id:
+                LOG.error("Unknown router-id, needed for route leaking")
+                return
+
+        vrf_template = Template(LEAK_VRF_TEMPLATE)
+        vrf_config = vrf_template.render(vrf_name=vrf, bgp_as=bgp_as,
+                                         redistribute=DEFAULT_REDISTRIBUTE,
+                                         bgp_router_id=bgp_router_id)
+        self._run_vtysh_config_with_tempfile(vrf_config)
+
+    def vrf_reconfigure(self, evpn_info, action):
+        LOG.info("FRR reconfiguration (action = %s) for evpn: %s",
+                 action, evpn_info)
+
+        # If we have more actions, we can define them in this list.
+        vrf_templates = {
+            'add-vrf': ADD_VRF_TEMPLATE,
+            'del-vrf': DEL_VRF_TEMPLATE,
+        }
+        if action not in vrf_templates:
+            LOG.error("Unknown FRR reconfiguration action: %s", action)
+            return
 
-    # Parse dns servers from dhcp options.
-    dns_servers = []
-    if opts.get('dns_server'):
-        dns_servers = [s.strip() for s in opts['dns_server'][1:-1].split(',')]
+        # Set default opts, so all params are available for the templates
+        # Then update them with evpn_info
+        opts = dict(route_targets=[], route_distinguishers=[],
+                    export_targets=[], import_targets=[],
+                    local_ip=CONF.evpn_local_ip,
+                    redistribute=DEFAULT_REDISTRIBUTE,
+                    bgp_as=CONF.bgp_AS, vrf_name='', vni=0)
+        opts.update(evpn_info)
 
-    is_dhcpv6 = True  # Need a better way to define this one.
+        if not opts['vrf_name']:
+            opts['vrf_name'] = "{}{}".format(constants.OVN_EVPN_VRF_PREFIX,
+                                             evpn_info['vni'])
 
-    nd_config = nd_template.render(
-        intf=interface,
-        prefix=prefix,
-        dns_servers=dns_servers,
-        is_dhcpv6=is_dhcpv6,
-    )
+        vrf_template = Template(vrf_templates.get(action))
+        vrf_config = vrf_template.render(**opts)
 
-    _run_vtysh_config_with_tempfile(nd_config)
+        self._run_vtysh_config_with_tempfile(vrf_config)
 
+    def set_default_redistribute(self, redist_opts):
+        if not isinstance(redist_opts, set):
+            redist_opts = set(redist_opts)
 
-def vrf_leak(vrf, bgp_as, bgp_router_id=None, template=LEAK_VRF_TEMPLATE):
-    LOG.info("Add VRF leak for VRF %s on router bgp %s", vrf, bgp_as)
-    if not bgp_router_id:
-        bgp_router_id = _get_router_id()
-        if not bgp_router_id:
-            LOG.error("Unknown router-id, needed for route leaking")
+        if redist_opts == DEFAULT_REDISTRIBUTE:
+            # no update required.
             return
 
-    vrf_template = Template(template)
-    vrf_config = vrf_template.render(vrf_name=vrf, bgp_as=bgp_as,
-                                     redistribute=DEFAULT_REDISTRIBUTE,
-                                     bgp_router_id=bgp_router_id)
-    _run_vtysh_config_with_tempfile(vrf_config)
-
-
-def vrf_reconfigure(evpn_info, action):
-    LOG.info("FRR reconfiguration (action = %s) for evpn: %s",
-             action, evpn_info)
-
-    # If we have more actions, we can define them in this list.
-    vrf_templates = {
-        'add-vrf': ADD_VRF_TEMPLATE,
-        'del-vrf': DEL_VRF_TEMPLATE,
-    }
-    if action not in vrf_templates:
-        LOG.error("Unknown FRR reconfiguration action: %s", action)
-        return
-
-    # Set default opts, so all params are available for the templates
-    # Then update them with evpn_info
-    opts = dict(route_targets=[], route_distinguishers=[], export_targets=[],
-                import_targets=[], local_ip=CONF.evpn_local_ip,
-                redistribute=DEFAULT_REDISTRIBUTE,
-                bgp_as=CONF.bgp_AS, vrf_name='', vni=0)
-    opts.update(evpn_info)
-
-    if not opts['vrf_name']:
-        opts['vrf_name'] = "{}{}".format(constants.OVN_EVPN_VRF_PREFIX,
-                                         evpn_info['vni'])
-
-    vrf_template = Template(vrf_templates.get(action))
-    vrf_config = vrf_template.render(**opts)
-
-    _run_vtysh_config_with_tempfile(vrf_config)
+        DEFAULT_REDISTRIBUTE.clear()
+        DEFAULT_REDISTRIBUTE.update(redist_opts)
diff --git a/ovn_bgp_agent/tests/unit/drivers/openstack/test_nb_ovn_bgp_driver.py b/ovn_bgp_agent/tests/unit/drivers/openstack/test_nb_ovn_bgp_driver.py
index 1848c49..14274f8 100644
--- a/ovn_bgp_agent/tests/unit/drivers/openstack/test_nb_ovn_bgp_driver.py
+++ b/ovn_bgp_agent/tests/unit/drivers/openstack/test_nb_ovn_bgp_driver.py
@@ -78,7 +78,7 @@ class TestNBOVNBGPDriver(test_base.TestCase):
         self.conf_ovsdb_connection = 'tcp:127.0.0.1:6642'
 
     @mock.patch.object(linux_net, 'ensure_vrf')
-    @mock.patch.object(frr, 'vrf_leak')
+    @mock.patch.object(frr.FRRDriver, 'vrf_leak')
     @mock.patch.object(linux_net, 'ensure_ovn_device')
     @mock.patch.object(linux_net, 'delete_routes_from_table')
     def test_start(self, mock_delete_routes_from_table,
@@ -105,8 +105,7 @@ class TestNBOVNBGPDriver(test_base.TestCase):
         mock_ensure_vrf.assert_called_once_with(
             CONF.bgp_vrf, CONF.bgp_vrf_table_id)
         mock_vrf_leak.assert_called_once_with(
-            CONF.bgp_vrf, CONF.bgp_AS, CONF.bgp_router_id,
-            template=frr.LEAK_VRF_TEMPLATE)
+            CONF.bgp_vrf, CONF.bgp_AS, CONF.bgp_router_id)
         mock_ensure_ovn_device.assert_called_once_with(CONF.bgp_nic,
                                                        CONF.bgp_vrf)
         mock_delete_routes_from_table.assert_called_once_with(
@@ -114,7 +113,7 @@ class TestNBOVNBGPDriver(test_base.TestCase):
         self.mock_nbdb().start.assert_called_once_with()
 
     @mock.patch.object(linux_net, 'ensure_ovn_device')
-    @mock.patch.object(frr, 'vrf_leak')
+    @mock.patch.object(frr.FRRDriver, 'vrf_leak')
     @mock.patch.object(linux_net, 'ensure_vrf')
     def test_frr_sync(self, mock_ensure_vrf, mock_vrf_leak,
                       mock_ensure_ovn_dev):
@@ -123,8 +122,7 @@ class TestNBOVNBGPDriver(test_base.TestCase):
         mock_ensure_vrf.assert_called_once_with(
             CONF.bgp_vrf, CONF.bgp_vrf_table_id)
         mock_vrf_leak.assert_called_once_with(
-            CONF.bgp_vrf, CONF.bgp_AS, CONF.bgp_router_id,
-            template=frr.LEAK_VRF_TEMPLATE)
+            CONF.bgp_vrf, CONF.bgp_AS, CONF.bgp_router_id)
         mock_ensure_ovn_dev.assert_called_once_with(
             CONF.bgp_nic, CONF.bgp_vrf)
 
diff --git a/ovn_bgp_agent/tests/unit/drivers/openstack/test_ovn_bgp_driver.py b/ovn_bgp_agent/tests/unit/drivers/openstack/test_ovn_bgp_driver.py
index dbf3876..a831398 100644
--- a/ovn_bgp_agent/tests/unit/drivers/openstack/test_ovn_bgp_driver.py
+++ b/ovn_bgp_agent/tests/unit/drivers/openstack/test_ovn_bgp_driver.py
@@ -75,20 +75,19 @@ class TestOVNBGPDriver(test_base.TestCase):
 
     @mock.patch.object(linux_net, 'ensure_ovn_device')
     @mock.patch.object(linux_net, 'ensure_vrf')
-    @mock.patch.object(frr, 'vrf_leak')
+    @mock.patch.object(frr.FRRDriver, 'vrf_leak')
     def test_start(self, mock_vrf, *args):
         self.bgp_driver.start()
 
         mock_vrf.assert_called_once_with(
-            CONF.bgp_vrf, CONF.bgp_AS, CONF.bgp_router_id,
-            template=frr.LEAK_VRF_TEMPLATE)
+            CONF.bgp_vrf, CONF.bgp_AS, CONF.bgp_router_id)
         # Assert connections were started
         self.mock_ovs_idl().start.assert_called_once_with(
             CONF.ovsdb_connection)
         self.mock_sbdb().start.assert_called_once_with()
 
     @mock.patch.object(linux_net, 'ensure_ovn_device')
-    @mock.patch.object(frr, 'vrf_leak')
+    @mock.patch.object(frr.FRRDriver, 'vrf_leak')
     @mock.patch.object(linux_net, 'ensure_vrf')
     def test_frr_sync(self, mock_ensure_vrf, mock_vrf_leak,
                       mock_ensure_ovn_dev):
@@ -97,8 +96,7 @@ class TestOVNBGPDriver(test_base.TestCase):
         mock_ensure_vrf.assert_called_once_with(
             CONF.bgp_vrf, CONF.bgp_vrf_table_id)
         mock_vrf_leak.assert_called_once_with(
-            CONF.bgp_vrf, CONF.bgp_AS, CONF.bgp_router_id,
-            template=frr.LEAK_VRF_TEMPLATE)
+            CONF.bgp_vrf, CONF.bgp_AS, CONF.bgp_router_id)
         mock_ensure_ovn_dev.assert_called_once_with(
             CONF.bgp_nic, CONF.bgp_vrf)
 
diff --git a/ovn_bgp_agent/tests/unit/drivers/openstack/test_ovn_evpn_driver.py b/ovn_bgp_agent/tests/unit/drivers/openstack/test_ovn_evpn_driver.py
index 0815577..204b164 100644
--- a/ovn_bgp_agent/tests/unit/drivers/openstack/test_ovn_evpn_driver.py
+++ b/ovn_bgp_agent/tests/unit/drivers/openstack/test_ovn_evpn_driver.py
@@ -185,7 +185,7 @@ class TestOVNEVPNDriver(test_base.TestCase):
         self.assertEqual((None, None), ret)
 
     @mock.patch.object(linux_net, 'add_ip_nei')
-    @mock.patch.object(frr, 'vrf_reconfigure')
+    @mock.patch.object(frr.FRRDriver, 'vrf_reconfigure')
     def _test_expose_ip(
             self, mock_vrf_reconfigure, mock_add_ip_nei, cr_lrp=False):
         mock_get_bridge = mock.patch.object(
@@ -246,7 +246,7 @@ class TestOVNEVPNDriver(test_base.TestCase):
         self._test_expose_ip(cr_lrp=True)
 
     @mock.patch.object(ovs, 'remove_evpn_router_ovs_flows')
-    @mock.patch.object(frr, 'vrf_reconfigure')
+    @mock.patch.object(frr.FRRDriver, 'vrf_reconfigure')
     def _test_withdraw_ip(
             self, mock_vrf_reconfigure, mock_remove_evpn_flows, cr_lrp=True,
             ret_vlan_tag=True):
diff --git a/ovn_bgp_agent/tests/unit/drivers/openstack/test_ovn_stretched_l2_bgp_driver.py b/ovn_bgp_agent/tests/unit/drivers/openstack/test_ovn_stretched_l2_bgp_driver.py
index 896d4ac..feee7d6 100644
--- a/ovn_bgp_agent/tests/unit/drivers/openstack/test_ovn_stretched_l2_bgp_driver.py
+++ b/ovn_bgp_agent/tests/unit/drivers/openstack/test_ovn_stretched_l2_bgp_driver.py
@@ -138,13 +138,13 @@ class TestOVNBGPStretchedL2Driver(test_base.TestCase):
     @mock.patch.object(linux_net, "ensure_vrf")
     @mock.patch.object(linux_net, "ensure_ovn_device")
     @mock.patch.object(linux_net, "delete_routes_from_table")
-    @mock.patch.object(frr, "vrf_leak")
+    @mock.patch.object(frr.FRRDriver, "vrf_leak")
     def test_start(self, mock_vrf, mock_delete_routes, mock_ensure_ovn_device,
                    *args):
         CONF.set_override("clear_vrf_routes_on_startup", True)
 
         mock_redistribute = mock.patch.object(
-            frr, "set_default_redistribute"
+            frr.FRRDriver, "set_default_redistribute"
         ).start()
 
         self.bgp_driver.start()
@@ -154,7 +154,6 @@ class TestOVNBGPStretchedL2Driver(test_base.TestCase):
             CONF.bgp_vrf,
             CONF.bgp_AS,
             CONF.bgp_router_id,
-            template=frr.LEAK_VRF_TEMPLATE,
         )
         # Assert connections were started
         self.mock_ovs_idl().start.assert_called_once_with(
@@ -168,13 +167,13 @@ class TestOVNBGPStretchedL2Driver(test_base.TestCase):
     @mock.patch.object(linux_net, "ensure_vrf")
     @mock.patch.object(linux_net, "ensure_ovn_device")
     @mock.patch.object(linux_net, "delete_routes_from_table")
-    @mock.patch.object(frr, "vrf_leak")
+    @mock.patch.object(frr.FRRDriver, "vrf_leak")
     def test_start_clear_routes(
         self, mock_vrf, mock_delete_routes, mock_ensure_ovn_device, *args):
         CONF.set_override("clear_vrf_routes_on_startup", False)
 
         mock_redistribute = mock.patch.object(
-            frr, "set_default_redistribute"
+            frr.FRRDriver, "set_default_redistribute"
         ).start()
 
         self.bgp_driver.start()
@@ -184,7 +183,6 @@ class TestOVNBGPStretchedL2Driver(test_base.TestCase):
             CONF.bgp_vrf,
             CONF.bgp_AS,
             CONF.bgp_router_id,
-            template=frr.LEAK_VRF_TEMPLATE,
         )
         # Assert connections were started
         self.mock_ovs_idl().start.assert_called_once_with(
diff --git a/ovn_bgp_agent/tests/unit/drivers/openstack/utils/test_bgp.py b/ovn_bgp_agent/tests/unit/drivers/openstack/utils/test_bgp.py
index ee3fb79..adcfce3 100644
--- a/ovn_bgp_agent/tests/unit/drivers/openstack/utils/test_bgp.py
+++ b/ovn_bgp_agent/tests/unit/drivers/openstack/utils/test_bgp.py
@@ -17,6 +17,7 @@ from oslo_config import cfg
 from unittest import mock
 
 from ovn_bgp_agent import constants
+from ovn_bgp_agent.drivers import driver_api
 from ovn_bgp_agent.drivers.openstack.utils import bgp as bgp_utils
 from ovn_bgp_agent.tests import base as test_base
 
@@ -29,9 +30,13 @@ class TestEVPN(test_base.TestCase):
     def setUp(self):
         super(TestEVPN, self).setUp()
 
-        self.mock_frr = mock.patch.object(bgp_utils, 'frr').start()
+        self.mock_frr = mock.Mock()
         self.mock_linux_net = mock.patch.object(bgp_utils, 'linux_net').start()
 
+        mock_get_instance = mock.patch.object(driver_api.BGPDriverBase,
+                                              "get_instance").start()
+        mock_get_instance.return_value = self.mock_frr
+
     def _set_exposing_method(self, exposing_method):
         CONF.set_override('exposing_method', exposing_method)
         self.addCleanup(CONF.clear_override, 'exposing_method')
diff --git a/ovn_bgp_agent/tests/unit/drivers/openstack/utils/test_evpn.py b/ovn_bgp_agent/tests/unit/drivers/openstack/utils/test_evpn.py
index 3e85931..9565b21 100644
--- a/ovn_bgp_agent/tests/unit/drivers/openstack/utils/test_evpn.py
+++ b/ovn_bgp_agent/tests/unit/drivers/openstack/utils/test_evpn.py
@@ -17,6 +17,7 @@ from oslo_config import cfg
 from unittest import mock
 
 from ovn_bgp_agent import constants
+from ovn_bgp_agent.drivers import driver_api
 from ovn_bgp_agent.drivers.openstack.utils import evpn
 from ovn_bgp_agent import exceptions
 from ovn_bgp_agent.tests import base as test_base
@@ -35,9 +36,13 @@ class TestEVPN(test_base.TestCase):
         self.mock_ovs = mock.patch.object(evpn, 'ovs').start()
         self.mock_ovs.get_ovs_patch_port_ofport.return_value = 12
 
-        self.mock_frr = mock.patch.object(evpn, 'frr').start()
+        self.mock_frr = mock.Mock()
         self.mock_linux_net = mock.patch.object(evpn, 'linux_net').start()
 
+        mock_get_instance = mock.patch.object(driver_api.BGPDriverBase,
+                                              "get_instance").start()
+        mock_get_instance.return_value = self.mock_frr
+
         self.fake_mac = fake_mac = 'fe:12:34:56:89:90'
         self.mock_linux_net.get_interface_address.return_value = fake_mac
 
diff --git a/ovn_bgp_agent/tests/unit/drivers/openstack/utils/test_frr.py b/ovn_bgp_agent/tests/unit/drivers/openstack/utils/test_frr.py
index ef1913b..047aa30 100644
--- a/ovn_bgp_agent/tests/unit/drivers/openstack/utils/test_frr.py
+++ b/ovn_bgp_agent/tests/unit/drivers/openstack/utils/test_frr.py
@@ -25,21 +25,22 @@ class TestFrr(test_base.TestCase):
 
     def setUp(self):
         super(TestFrr, self).setUp()
+        self.frr_driver = frr_utils.FRRDriver()
         self.mock_vtysh = mock.patch('ovn_bgp_agent.privileged.vtysh').start()
 
     def test__get_router_id(self):
         router_id = 'fake-router'
         self.mock_vtysh.run_vtysh_command.return_value = (
             '{"ipv4Unicast": {"routerId": "%s"}}' % router_id)
-        ret = frr_utils._get_router_id()
+        ret = self.frr_driver._get_router_id()
         self.assertEqual(router_id, ret)
 
     def test__get_router_id_no_ipv4_settings(self):
         self.mock_vtysh.run_vtysh_command.return_value = '{}'
-        ret = frr_utils._get_router_id()
+        ret = self.frr_driver._get_router_id()
         self.assertIsNone(ret)
 
-    @mock.patch.object(frr_utils, '_get_router_id')
+    @mock.patch.object(frr_utils.FRRDriver, '_get_router_id')
     @mock.patch.object(tempfile, 'NamedTemporaryFile')
     def test_vrf_leak(self, mock_tf, mock_gri):
         vrf = 'fake-vrf'
@@ -47,7 +48,7 @@ class TestFrr(test_base.TestCase):
         router_id = 'fake-router-id'
         mock_gri.return_value = router_id
 
-        frr_utils.vrf_leak(vrf, bgp_as)
+        self.frr_driver.vrf_leak(vrf, bgp_as)
 
         write_arg = mock_tf.return_value.write.call_args_list[0][0][0]
         self.assertIn(vrf, write_arg)
@@ -55,11 +56,11 @@ class TestFrr(test_base.TestCase):
         # Assert the file was closed
         mock_tf.return_value.close.assert_called_once_with()
 
-    @mock.patch.object(frr_utils, '_get_router_id')
+    @mock.patch.object(frr_utils.FRRDriver, '_get_router_id')
     @mock.patch.object(tempfile, 'NamedTemporaryFile')
     def test_vrf_leak_no_router_id(self, mock_tf, mock_gri):
         mock_gri.return_value = None
-        frr_utils.vrf_leak('fake-vrf', 'fake-bgp-as')
+        self.frr_driver.vrf_leak('fake-vrf', 'fake-bgp-as')
         # Assert no file was created
         self.assertFalse(mock_tf.called)
 
@@ -68,7 +69,7 @@ class TestFrr(test_base.TestCase):
         action = 'add-vrf' if add_vrf else 'del-vrf'
         evpn_info = {'vni': '1001', 'bgp_as': 'fake-bgp-as'}
 
-        frr_utils.vrf_reconfigure(evpn_info, action)
+        self.frr_driver.vrf_reconfigure(evpn_info, action)
 
         vrf_name = "{}{}".format(constants.OVN_EVPN_VRF_PREFIX,
                                  evpn_info['vni'])
@@ -93,7 +94,9 @@ class TestFrr(test_base.TestCase):
         self._test_vrf_reconfigure(add_vrf=False)
 
     def test_vrf_reconfigure_unknown_action(self):
-        frr_utils.vrf_reconfigure({'fake': 'evpn-info'}, 'non-existing-action')
+        self.frr_driver.vrf_reconfigure(
+            {'fake': 'evpn-info'}, 'non-existing-action'
+        )
         # Assert run_vtysh_command() wasn't called
         self.assertFalse(self.mock_vtysh.run_vtysh_config.called)
 
@@ -106,7 +109,7 @@ class TestFrr(test_base.TestCase):
             'dns_server': '{2001:4860:4860::8888, 2001:4860:4860::8844}',
         }
 
-        frr_utils.nd_reconfigure(interface, prefix, opts)
+        self.frr_driver.nd_reconfigure(interface, prefix, opts)
 
         write_arg = mock_tf.return_value.write.call_args_list[0][0][0]
 
diff --git a/setup.cfg b/setup.cfg
index c4ea0af..f0c43a7 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -40,5 +40,8 @@ ovn_bgp_agent.drivers =
     ovn_evpn_driver = ovn_bgp_agent.drivers.openstack.ovn_evpn_driver:OVNEVPNDriver
     ovn_stretched_l2_bgp_driver = ovn_bgp_agent.drivers.openstack.ovn_stretched_l2_bgp_driver:OVNBGPStretchedL2Driver
 
+ovn_bgp_agent.bgp_drivers =
+    frr = ovn_bgp_agent.drivers.openstack.utils.frr:FRRDriver
+
 oslo.config.opts =
     ovnbgpagent = ovn_bgp_agent.config:list_opts
-- 
2.34.1
