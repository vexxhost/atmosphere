From b6f8f9237bc45780bd99e362a5eb2447ccf9a132 Mon Sep 17 00:00:00 2001
From: Gabriel Adrian Samfira <gsamfira@cloudbasesolutions.com>
Date: Wed, 09 Oct 2024 12:32:36 +0300
Subject: [PATCH] Bind internal router port for VLAN network

In an OVN deployment where external (baremetal) ports are connected to
VLAN networks, we need to bind the internal router port associated with
the network to the same ha_chassis_group of the network. This will mimic
the way the external port of the router functions in relation to the
upstream gateway.

In essence, the baremetal ports are not able to communicate with their
default gateway if either the internal router port is unbound or if
the vrouter does not have an external gateway set, with the external
router port bound to the same exact chassis and with the same exact
priorities as the ha_chassis_group of the VLAN network.

Closes-Bug: 1995078

Change-Id: Ib79294e111f111a23381c582e543591fd18948d2
Signed-off-by: Gabriel Adrian Samfira <gsamfira@cloudbasesolutions.com>
---

diff --git a/neutron/plugins/ml2/drivers/ovn/mech_driver/ovsdb/ovn_client.py b/neutron/plugins/ml2/drivers/ovn/mech_driver/ovsdb/ovn_client.py
index 082c72d..70549ae 100644
--- a/neutron/plugins/ml2/drivers/ovn/mech_driver/ovsdb/ovn_client.py
+++ b/neutron/plugins/ml2/drivers/ovn/mech_driver/ovsdb/ovn_client.py
@@ -1742,6 +1742,14 @@
         if ipv6_ra_configs:
             columns['ipv6_ra_configs'] = ipv6_ra_configs
 
+        if port.get("device_owner", None) == "network:router_interface":
+            network = self._plugin.get_network(context, port['network_id'])
+            if network.get(pnet.NETWORK_TYPE) == const.TYPE_VLAN:
+                ha_grp_id = (utils.sync_ha_chassis_group_network(
+                        context, self._nb_idl, self._sb_idl,
+                        port['id'], port['network_id'], txn)[0],)
+                columns["ha_chassis_group"] = ha_grp_id
+
         commands = [
             self._nb_idl.add_lrouter_port(
                 name=lrouter_port_name,
diff --git a/neutron/tests/unit/services/ovn_l3/test_plugin.py b/neutron/tests/unit/services/ovn_l3/test_plugin.py
index c9b1e85..94271588 100644
--- a/neutron/tests/unit/services/ovn_l3/test_plugin.py
+++ b/neutron/tests/unit/services/ovn_l3/test_plugin.py
@@ -13,6 +13,7 @@
 #
 
 import copy
+import uuid
 from unittest import mock
 
 from neutron_lib.api.definitions import external_net
@@ -761,8 +762,11 @@
     @mock.patch('neutron.plugins.ml2.drivers.ovn.mech_driver.ovsdb.ovn_client'
                 '.OVNClient._get_router_ports')
     @mock.patch('neutron.db.l3_db.L3_NAT_dbonly_mixin.add_router_interface')
-    def test_add_router_interface_vlan_network(self, ari, grps, gn):
+    @mock.patch('neutron.common.ovn.utils.sync_ha_chassis_group_network')
+    def test_add_router_interface_vlan_network(self, shcg, ari, grps, gn):
         router_id = 'router-id'
+        ha_chassis_group_uuid = uuid.uuid4()
+        shcg.return_value = (ha_chassis_group_uuid, "fake_ha_chassis_group")
         ari.return_value = self.fake_router_interface_info
         self.get_router.return_value = self.fake_router_with_ext_gw
 
@@ -787,6 +791,7 @@
         fake_router_port_assert = self.fake_router_port_assert
         fake_router_port_assert['options'] = {
             'reside-on-redirect-chassis': 'true'}
+        fake_router_port_assert['ha_chassis_group'] = (ha_chassis_group_uuid,)
 
         self.l3_inst._nb_ovn.add_lrouter_port.assert_called_once_with(
             **fake_router_port_assert)
@@ -798,6 +803,7 @@
             'neutron-router-id', logical_ip='10.0.0.0/24',
             external_ip='192.168.1.1', type='snat')
 
+        shcg.assert_called_once()
         self.bump_rev_p.assert_called_with(
             mock.ANY, self.fake_router_port,
             ovn_const.TYPE_ROUTER_PORTS)
